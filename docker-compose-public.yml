services:

  postgres:
    image: postgres
    container_name: postgres
    restart: always
    # set shared memory limit when using docker-compose
    shm_size: 128mb
    environment:
      POSTGRES_PASSWORD: %DB_PASSWORD%
    ports:
      - 64205:5432
    networks:
      - ars
    volumes:
      - postgres-data:/var/lib/postgresql/data

  app:
    image: ars
    container_name: app
    restart: on-failure
    build:
      context: .
      dockerfile: Dockerfile
#    ports:
#      - 64208:8080
    networks:
      - ars
    labels:
      - traefik.http.routers.ars.entrypoints=web
      - traefik.http.routers.ars.rule=Host(`allrensys.com`)
#      - traefik.http.services.ars.loadbalancer.server.port=8080
  
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: on-failure
    ports:
      - 64209:9090
    networks:
      - ars
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
  
  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    #    environment:
    #      - GF_SERVER_ROOT_URL=http://localhost:64203/grafana
    #      - GF_INSTALL_PLUGINS=grafana-clock-panel
    ports:
      - 64203:3000
    networks:
      - ars
    volumes:
      - 'grafana-data:/var/lib/grafana'

  traefik:
    image: traefik:v3.1
    container_name: traefik
    command:
    ports:
      - "80:80"
      - "8080:8080"
    networks:
      - ars
    volumes:
      - ~/traefik/acme.json:/acme.json
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yml:/etc/traefik/traefik.yml:ro
    labels:
      - traefik.enable=true
#       - traefik.http.routers.traefik.entrypoints=https
      - traefik.http.routers.traefik.rule=Host(`traefik.allrensys.com`)
#       - traefik.http.routers.traefik.tls=true
#       - traefik.http.routers.traefik.tls.certresolver=letsEncrypt
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.services.traefik-traefik.loadbalancer.server.port=888
    profiles: [ ]

volumes:
  postgres-data: { }
  prometheus-data: { }
  grafana-data: { }

networks:
  ars:
    name: ars