services:

  postgres:
    image: postgres
    container_name: postgres
    restart: on-failure
    # set shared memory limit when using docker-compose
    shm_size: 128mb
    environment:
      POSTGRES_PASSWORD: %DB_PASSWORD%
    ports:
      - 64205:5432
    networks:
      - ars
    volumes:
      - postgres-data:/var/lib/postgresql/data

  app:
    image: ars
    container_name: app
    restart: on-failure
    build:
      context: .
      dockerfile: Dockerfile
    networks:
      - ars
    labels:
      - traefik.enable=true
      - traefik.http.routers.app.rule=Host(`allrensys.com`)
      - traefik.http.routers.app.tls=true
      - traefik.http.routers.app.tls.certresolver=letsEncrypt
  
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: on-failure
    networks:
      - ars
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
  
  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: on-failure
    #    environment:
    #      - GF_INSTALL_PLUGINS=grafana-clock-panel
    networks:
      - ars
    volumes:
      - grafana-data:/var/lib/grafana
    labels:
      - traefik.enable=true
      - traefik.http.routers.grafana.rule=Host(`grafana.allrensys.com`)
      - traefik.http.routers.grafana.tls=true
      - traefik.http.routers.grafana.tls.certresolver=letsEncrypt

  traefik:
    image: traefik:v3.1
    container_name: traefik
    restart: no
    command:
    ports:
      - 80:80
      - 443:443
    networks:
      - ars
    volumes:
      - ~/traefik/acme.json:/acme.json
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yml:/etc/traefik/traefik.yml:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.rule=Host(`traefik.allrensys.com`)
      - traefik.http.routers.traefik.tls=true
      - traefik.http.routers.traefik.tls.certresolver=letsEncrypt
      - traefik.http.routers.traefik.service=api@internal
    profiles: [ ]

volumes:
  postgres-data: { }
  prometheus-data: { }
  grafana-data: { }

networks:
  ars:
    name: ars